import os
import uuid
import asyncio
import random
import aiohttp
import logging
import sqlite3
from gtts import gTTS
from aiogram.types import InputMediaPhoto, InputMediaVideo
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from pydub import AudioSegment
from pydub.utils import which
import speech_recognition as sr

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='7988490161:AAE8vX6zGaXeb5LFWUBSbNfR6RCpABUnW9g')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

ADMIN_ID = 5019012143  # ID –∞–¥–º—ñ–Ω–∞
TOKEN = '6333120732:AAEqHvLkp6x-2JMmkvgqzGtMSJNRvh4Nc_U'

AudioSegment.converter = which("ffmpeg")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    user_id INTEGER UNIQUE,
    first_name TEXT
)''')
# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
cursor.execute('''CREATE TABLE IF NOT EXISTS saved_voices (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    short_id TEXT UNIQUE,
    file_id TEXT
)''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def add_user(user_id, first_name):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, first_name) VALUES (?, ?)", (user_id, first_name))
    conn.commit()

# –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def get_users_count():
    cursor.execute("SELECT COUNT(*) FROM users")
    return cursor.fetchone()[0]

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
def get_all_users():
    cursor.execute("SELECT user_id, first_name FROM users")
    return cursor.fetchall()

# –î–æ–¥–∞—î –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
def save_voice_to_db(user_id, short_id, file_id):
    cursor.execute("INSERT OR IGNORE INTO saved_voices (user_id, short_id, file_id) VALUES (?, ?, ?)",
                   (user_id, short_id, file_id))
    conn.commit()

# –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_saved_voices(user_id):
    cursor.execute("SELECT short_id, file_id FROM saved_voices WHERE user_id=?", (user_id,))
    return cursor.fetchall()

# –û—Ç—Ä–∏–º—É—î file_id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞ –π–æ–≥–æ short_id
def get_voice_file_id(short_id):
    cursor.execute("SELECT file_id FROM saved_voices WHERE short_id=?", (short_id,))
    result = cursor.fetchone()
    return result[0] if result else None

# –í–∏–¥–∞–ª—è—î –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏
def delete_voice_from_db(user_id, short_id):
    cursor.execute("DELETE FROM saved_voices WHERE user_id=? AND short_id=?", (user_id, short_id))
    conn.commit()

class ConvertToVoiceStep(StatesGroup):
        waiting_for_text = State()
        waiting_for_audio = State()

CHANNELS = [
        ["–ö–∞–Ω–∞–ª ‚Ññ1", "-1002387051357", "https://t.me/Creatorbotua"],
]

voices = {
    'voice1': ('uk', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶'),
    'voice2': ('pl', 'Polski üáµüá±'),
    'voice3': ('it', 'Italiano üáÆüáπ'),
    'voice4': ('fr', 'Fran√ßais üá´üá∑'),
    'voice5': ('en', 'English üá∫üá≤'),
    'voice6': ('es', 'Espa√±ol üá™üá∏')
}

NOT_SUB_MESSAGE = "<b>‚Äº–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üôÇ"

async def check_sub_channels(channels, user_id):
        for channel in channels:
            chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
            if chat_member['status'] == 'left':
                return False
        return True

def showChannels():
        submarkup = InlineKeyboardMarkup(row_width=1)

        for channel in CHANNELS:
            btn = InlineKeyboardButton(text=channel[0], url=channel[2])
            submarkup.insert(btn)

        btndonesub = InlineKeyboardButton(text='üîê–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', callback_data='subchanneldone')
        submarkup.insert(btndonesub)

        return submarkup
@dp.callback_query_handler(text='subchanneldone', state="*")
async def check_subscription(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    if await check_sub_channels(CHANNELS, user_id):
        await state.finish()  # –ó–∞–∫—ñ–Ω—á—É—î–º–æ —Å—Ç–∞–Ω
        await call.message.delete()
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        itembtn2 = KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—èüîä')
        markup.row(itembtn2)
        itembtn1 = KeyboardButton('üó£Ô∏è–í–∏–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å')
        itembtn3 = KeyboardButton('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—èüìú')
        itembtn4 = KeyboardButton('‚≠êÔ∏è–ó–±–µ—Ä–µ–∂–µ–Ω–µ')
        markup.row(itembtn1, itembtn3)
        markup.row(itembtn4)
        markup.add()

        first_name = call.from_user.first_name
        greeting_text = f"–ü—Ä–∏–≤—ñ—Ç, <b>{first_name}!</b> üòä\nüíº @Voice_text_ua_bot - –±–æ—Ç, —è–∫–∏–π –≤–º—ñ—î –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —É –≥–æ–ª–æ—Å üéôÔ∏è\n\n–¢–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î —É <b>–≥—Ä—É–ø–∞—Ö</b> —Ç–∞ <b>—á–∞—Ç–∞—Ö</b>üí¨\n\nüñá<b>–í–º—ñ—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n‚ùó–ú–æ–∂–µ –æ–∑–≤—É—á—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∞ –≥–æ–ª–æ—Å–∞–º–∏</b>"
        await call.message.answer(greeting_text, parse_mode=types.ParseMode.HTML, reply_markup=markup)
    else:
        await call.message.delete()
        await call.message.answer(NOT_SUB_MESSAGE, parse_mode=types.ParseMode.HTML, reply_markup=showChannels())

class ReklamaStates(StatesGroup):
    waiting_for_ad_text = State()
    waiting_for_media_confirmation = State()
    waiting_for_media = State()
    waiting_for_button_confirmation = State()
    waiting_for_number_of_buttons = State()
    waiting_for_buttons_text = State()
    waiting_for_buttons_url = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–µ–∫–ª–∞–º–∏
@dp.message_handler(commands=['reklama'])
async def send_reklama(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("‚úç –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:")
        await ReklamaStates.waiting_for_ad_text.set()  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–µ–∫–ª–∞–º–∏
    else:
        pass

# 2Ô∏è‚É£ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–µ–∫–ª–∞–º–∏
@dp.message_handler(state=ReklamaStates.waiting_for_ad_text)
async def get_ad_text(message: types.Message, state: FSMContext):
    ad_text = message.text
    await state.update_data(ad_text=ad_text)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ

    # –ó–∞–ø–∏—Ç—É—î–º–æ, —á–∏ —Ö–æ—á–µ –∞–¥–º—ñ–Ω –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–¥—ñ–∞", callback_data="send_media_yes"),
        InlineKeyboardButton("–ù—ñ, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –º–µ–¥—ñ–∞", callback_data="send_media_no")
    )
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–∏ –¥–æ–¥–∞–Ω–æ. –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ?", reply_markup=keyboard)
    await ReklamaStates.waiting_for_media_confirmation.set()  # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞

@dp.callback_query_handler(lambda c: c.data in ["send_media_yes", "send_media_no"], state=ReklamaStates.waiting_for_media_confirmation)
async def confirm_media(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "send_media_yes":
        await callback_query.message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–∏.")
        await ReklamaStates.waiting_for_media.set()
    else:
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–¢–∞–∫", callback_data="confirm_buttons_yes"),
            InlineKeyboardButton("–ù—ñ", callback_data="confirm_buttons_no")
        )
        await callback_query.message.answer("‚úÖ –ú–µ–¥—ñ–∞ –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ. –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏?", reply_markup=keyboard)
        await ReklamaStates.waiting_for_button_confirmation.set()

@dp.message_handler(content_types=['photo', 'video'], state=ReklamaStates.waiting_for_media)
async def get_media(message: types.Message, state: FSMContext):
    media_id = message.photo[-1].file_id if message.photo else message.video.file_id
    media_type = "photo" if message.photo else "video"
    await state.update_data(media=media_id, media_type=media_type)
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–¢–∞–∫", callback_data="confirm_buttons_yes"),
        InlineKeyboardButton("–ù—ñ", callback_data="confirm_buttons_no")
    )
    await message.answer("‚úÖ –ú–µ–¥—ñ–∞ –¥–æ–¥–∞–Ω–æ. –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏?", reply_markup=keyboard)
    await ReklamaStates.waiting_for_button_confirmation.set()

@dp.callback_query_handler(lambda c: c.data == "confirm_buttons_no", state=ReklamaStates.waiting_for_button_confirmation)
async def send_ad_without_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = get_all_users()
    for user_id in users:
        try:
            if 'media' in data:
                if data['media_type'] == "photo":
                    await bot.send_photo(user_id[0], data['media'], caption=data['ad_text'], parse_mode='HTML')
                else:
                    await bot.send_video(user_id[0], data['media'], caption=data['ad_text'], parse_mode='HTML')
            else:
                await bot.send_message(user_id[0], data['ad_text'], parse_mode='HTML')
        except:
            pass
    await callback_query.message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "confirm_buttons_yes", state=ReklamaStates.waiting_for_button_confirmation)
async def ask_number_of_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úç –°–∫—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
    await ReklamaStates.waiting_for_number_of_buttons.set()

# 6Ô∏è‚É£ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(state=ReklamaStates.waiting_for_number_of_buttons)
async def get_number_of_buttons(message: types.Message, state: FSMContext):
    try:
        number_of_buttons = int(message.text)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü–µ —á–∏—Å–ª–æ–º
        if number_of_buttons <= 0:
            await message.answer("‚ùó –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.")
            return
    except ValueError:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return

    await state.update_data(number_of_buttons=number_of_buttons)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    await message.answer("‚úç –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å URL –¥–ª—è –∫–Ω–æ–ø–æ–∫:")
    await ReklamaStates.waiting_for_buttons_url.set()

# 7Ô∏è‚É£ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è URL –¥–ª—è –∫–Ω–æ–ø–æ–∫
@dp.message_handler(state=ReklamaStates.waiting_for_buttons_url)
async def get_url_for_buttons(message: types.Message, state: FSMContext):
    url = message.text
    await state.update_data(url_for_buttons=url)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ URL

    # –ó–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
    number_of_buttons = (await state.get_data())['number_of_buttons']
    await message.answer(f"‚úç –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑ {number_of_buttons} –∫–Ω–æ–ø–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                         "1 - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 1\n"
                         "2 - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 2\n"
                         "...\n"
                         "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: \n1 - –ö–Ω–æ–ø–∫–∞ 1\n2 - –ö–Ω–æ–ø–∫–∞ 2\n3 - –ö–Ω–æ–ø–∫–∞ 3\n4 - –ö–Ω–æ–ø–∫–∞ 4")
    await ReklamaStates.waiting_for_buttons_text.set()

# 8Ô∏è‚É£ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(state=ReklamaStates.waiting_for_buttons_text)
async def get_button_texts(message: types.Message, state: FSMContext):
    button_texts = message.text.split("\n")  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ä—è–¥–∫–∏
    if len(button_texts) != (await state.get_data())['number_of_buttons']:
        await message.answer(f"‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—ñ–≤–Ω–æ {await state.get_data()['number_of_buttons']} –∫–Ω–æ–ø–æ–∫.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—ñ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    button_texts = {int(line.split(' - ')[0]): line.split(' - ')[1] for line in button_texts}
    await state.update_data(button_texts=button_texts)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫

    ad_text = (await state.get_data())['ad_text']
    number_of_buttons = (await state.get_data())['number_of_buttons']
    url_for_buttons = (await state.get_data())['url_for_buttons']
    media = (await state.get_data()).get('media')

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è inline –∫–Ω–æ–ø–æ–∫ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=number_of_buttons)
    for i in range(1, number_of_buttons + 1):
        button_label = button_texts.get(i, f"–ö–Ω–æ–ø–∫–∞ {i}")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        keyboard.add(InlineKeyboardButton(button_label, url=url_for_buttons))

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∫–ª–∞–º—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞ –º–µ–¥—ñ–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    users = get_all_users()
    for user_id in users:
        try:
            if media:
                await bot.send_photo(user_id[0], media, caption=ad_text, parse_mode='HTML', reply_markup=keyboard) if isinstance(media, str) else await bot.send_video(user_id[0], media, caption=ad_text, parse_mode='HTML', reply_markup=keyboard)
            else:
                await bot.send_message(user_id[0], ad_text, parse_mode='HTML', reply_markup=keyboard)
        except Exception as e:
            pass

    await message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞ –º–µ–¥—ñ–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    await state.finish()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    first_name = message.from_user.first_name  # –î–æ–¥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = message.from_user.id

    add_user(user_id, first_name)

    if message.chat.type == 'private':  # –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        itembtn2 = KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—èüîä')
        markup.row(itembtn2)
        itembtn1 = KeyboardButton('üó£Ô∏è–í–∏–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å')
        itembtn3 = KeyboardButton('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—èüìú')
        itembtn4 = KeyboardButton('‚≠êÔ∏è–ó–±–µ—Ä–µ–∂–µ–Ω–µ')
        markup.row(itembtn1, itembtn3)
        markup.row(itembtn4)
        markup.add()

        greeting_text = f"–ü—Ä–∏–≤—ñ—Ç, <b>{first_name}!</b> üòä\nüíº @Voice_text_ua_bot - –±–æ—Ç, —è–∫–∏–π –≤–º—ñ—î –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —É –≥–æ–ª–æ—Å üéôÔ∏è\n\n–¢–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î —É <b>–≥—Ä—É–ø–∞—Ö</b> —Ç–∞ <b>—á–∞—Ç–∞—Ö</b>üí¨\n\nüñá<b>–í–º—ñ—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n‚ùó–ú–æ–∂–µ –æ–∑–≤—É—á—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∞ –≥–æ–ª–æ—Å–∞–º–∏</b>"
        await state.finish()
        await message.answer(greeting_text, parse_mode=types.ParseMode.HTML, reply_markup=markup)

    elif message.chat.type in ['group', 'supergroup']:  # –û–±—Ä–æ–±–∫–∞ –¥–ª—è –≥—Ä—É–ø
        greeting_text = f'–ü—Ä–∏–≤—ñ—Ç, <b>{first_name}!</b> üòä\nüíº –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É —É –≥–æ–ª–æ—Å üéôÔ∏è\n\n<b>–©–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó —É –≥—Ä—É–ø—ñ:</b>\n‚úÖ –ù–∞–¥—ñ—à–ª—ñ—Ç—å /voice <i>—Ç–µ–∫—Å—Ç</i> –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó\n‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /lang –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏'
        await message.reply(greeting_text, parse_mode=types.ParseMode.HTML)

@dp.message_handler(commands=['delete'], chat_type='private')
async def delete_saved_voices(message: types.Message):
    user_id = message.from_user.id

    #subscribed = await check_sub_channels(CHANNELS, message.from_user.id)

    #if subscribed:
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    saved_voices = get_saved_voices(user_id)

    if not saved_voices:
        await message.answer("<b>üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π!</b>\n\nüòØ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –≤ –∑–±–µ—Ä–µ–∂–µ–Ω–µ\n\nüîÅ–¢—É—Ç –º–æ–∂–Ω–∞ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑–Ω–æ–≤—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó!", parse_mode=types.ParseMode.HTML)
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    for short_id, file_id in saved_voices:
        delete_voice_from_db(user_id, short_id)

    await message.answer("–ó–±–µ—Ä–µ–∂–µ–Ω–µ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–µ!üì¶")

    #else:
       # await message.answer(
            #"<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b> üëáüèª",
            #parse_mode=types.ParseMode.HTML,
            #reply_markup=showChannels()
        #)

@dp.message_handler(commands=['users'])
async def show_users(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        users = get_all_users()
        count = get_users_count()
        if users:
            text = "\n".join([f"{user[1]} (ID: {user[0]})" for user in users])
            await message.answer(f"{count}\n\nüìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{text}")
        else:
            await message.answer("‚ùå –£ –±–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    else:
        pass

@dp.message_handler(commands=['voice'])
async def convert_command(message: types.Message, state: FSMContext):
        if message.chat.type in ['group', 'supergroup']:
            text = ' '.join(message.text.split()[1:])
            if not text:
                await message.reply("–í–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–∫—Å—Ç.")
            else:
                voice = user_voice.get(message.from_user.id, 'uk')  # default voice
                language = voice.split("-")[0]
                speech = gTTS(text=text, lang=language, slow=False)
                speech.save("speech.ogg")
                audio = open("speech.ogg", "rb")
                await message.reply_audio(audio, caption="@Voice_text_ua_bot")
                os.remove("speech.ogg")

@dp.message_handler(commands=['lang'])
async def voice_command(message: types.Message, state: FSMContext):
        if message.chat.type in ['group', 'supergroup']:
            user_id = message.from_user.id
            lang_code = user_voice.get(user_id, 'uk')  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≥–æ–ª–æ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            lang_name = next((name for code, name in voices.values() if code == lang_code), '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶')

            markup = get_first_page_keyboard()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É

            await message.reply(
    f"üì¢ –û–±–∏—Ä–∞–π—Ç–µ <b>–º–æ–≤—É</b> —Ç–∞ <b>–≥–æ–ª–æ—Å</b> –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!\n<b>üîπ–ê–∫—Ç–∏–≤–Ω–∞ –º–æ–≤–∞:</b> {lang_name}\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç ‚öôÔ∏è",
    parse_mode=types.ParseMode.HTML,
    reply_markup=markup
)

user_voice_messages = {}

@dp.message_handler(content_types=['text'])
async def process_message(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        #subscribed = await check_sub_channels(CHANNELS, message.from_user.id)

        #if subscribed:
        if message.text == 'üó£Ô∏è–í–∏–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å':
            user_id = message.from_user.id
            lang_code = user_voice.get(user_id, 'uk')  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –º–æ–≤–∏
            lang_name = next((name for code, name in voices.values() if code == lang_code), '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶')

            markup = InlineKeyboardMarkup(row_width=2)
            itembtn1 = InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data='voice1')
            itembtn2 = InlineKeyboardButton("Polski üáµüá±", callback_data='voice2')
            itembtn3 = InlineKeyboardButton("Italiano üáÆüáπ", callback_data='voice3')
            itembtn4 = InlineKeyboardButton("Fran√ßais üá´üá∑", callback_data='voice4')
            hu = InlineKeyboardButton("‚¨Ö", callback_data='x52')
            hu1 = InlineKeyboardButton("1/2", callback_data='x3')
            hu2 = InlineKeyboardButton("‚û°", callback_data='x2')
            markup.add(itembtn1, itembtn2, itembtn3, itembtn4)
            markup.row(hu, hu1, hu2)

            await state.finish()
            await message.answer(
                f"üì¢ –û–±–∏—Ä–∞–π—Ç–µ <b>–º–æ–≤—É</b> —Ç–∞ <b>–≥–æ–ª–æ—Å</b> –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!\n<b>üîπ–ê–∫—Ç–∏–≤–Ω–∞ –º–æ–≤–∞:</b> {lang_name}\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç ‚öôÔ∏è",
                parse_mode=types.ParseMode.HTML,
                reply_markup=markup
            )

        elif message.text == '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—èüìú':
            markups1 = InlineKeyboardMarkup(row_width=2)
            itembtn1 = InlineKeyboardButton("‚ûï–î–æ–¥–∞—Ç–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç",
                                            url='https://t.me/Voice_text_ua_bot?startgroup=AddGroup')
            markups1.add(itembtn1)
            await state.finish()
            await message.answer(
                '<b>ü§ñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —É –≥—Ä—É–ø–∞—Ö:</b>\n\n1. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø—É\n2. –ó—Ä–æ–±—ñ—Ç—å –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\nüéôÔ∏è–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É - /voice <i>—Ç–µ–∫—Å—Ç</i>\n\nüåê–í–∏–±—ñ—Ä –º–æ–≤–∏,–≥–æ–ª–æ—Å—É - /lang',
                reply_markup=markups1, parse_mode=types.ParseMode.HTML
            )

        elif message.text == 'üîô–ú–µ–Ω—é':
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            itembtn2 = KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—èüîä')
            markup.row(itembtn2)
            itembtn1 = KeyboardButton('üó£Ô∏è–í–∏–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å')
            itembtn3 = KeyboardButton('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—èüìú')
            itembtn4 = KeyboardButton('‚≠êÔ∏è–ó–±–µ—Ä–µ–∂–µ–Ω–µ')
            markup.row(itembtn1, itembtn3)
            markup.row(itembtn4)
            markup.add()

            first_name = message.from_user.first_name  # –î–æ–¥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

            greeting_text = f"–ü—Ä–∏–≤—ñ—Ç, <b>{first_name}!</b> üòä\nüíº @Voice_text_ua_bot - –±–æ—Ç, —è–∫–∏–π –≤–º—ñ—î –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —É –≥–æ–ª–æ—Å üéôÔ∏è\n\n–¢–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î —É <b>–≥—Ä—É–ø–∞—Ö</b> —Ç–∞ <b>—á–∞—Ç–∞—Ö</b>üí¨\n\nüñá<b>–í–º—ñ—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n‚ùó–ú–æ–∂–µ –æ–∑–≤—É—á—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏ —Ç–∞ –≥–æ–ª–æ—Å–∞–º–∏ üá∫üá¶</b>"
            await state.finish()
            await message.answer(greeting_text, parse_mode=types.ParseMode.HTML, reply_markup=markup)
            
        elif message.text == '‚≠êÔ∏è–ó–±–µ—Ä–µ–∂–µ–Ω–µ':
            user_id = message.from_user.id

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            saved_voices = get_saved_voices(user_id)

            if not saved_voices:
                await message.answer(
                "<b>üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π!</b>\n\nüòØ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –≤ –∑–±–µ—Ä–µ–∂–µ–Ω–µ\n\nüîÅ–¢—É—Ç –º–æ–∂–Ω–∞ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑–Ω–æ–≤—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó!",
                    parse_mode=types.ParseMode.HTML  # –í–∫–∞–∑—É—î–º–æ, —â–æ —Ü–µ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            )
                return

            # –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∏—Ö
            saved_count = len(saved_voices)

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∏—Ö
            markup = InlineKeyboardMarkup(row_width=1)
            for index, (short_id, file_id) in enumerate(saved_voices, start=1):
                markup.add(InlineKeyboardButton(f"üéô –ì–æ–ª–æ—Å–æ–≤–µ ‚Ññ{index}", callback_data=f"play_{short_id}"))

            await message.answer(f"<b>–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüéµ\n\nüñá –ó–±–µ—Ä–µ–∂–µ–Ω–æ</b> {saved_count}/10\n\n‚öôÔ∏è–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–µ —î –∫–æ–º–∞–Ω–¥–∞ - /delete", reply_markup=markup, parse_mode=types.ParseMode.HTML)

        elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—èüîä':
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            current_state = await state.get_state()

            if current_state == 'ConvertToVoiceStep:waiting_for_text':  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
                    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó, –∑–∞–≤–µ—Ä—à—É—î–º–æ –π–æ–≥–æ
                await state.finish()
                await message.answer("–†–µ–∂–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –æ–ø—Ü—ñ—é.",
                                        reply_markup=ReplyKeyboardMarkup(
                                            resize_keyboard=True,
                                            keyboard=[
                                                [KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—èüîä')],
                                                [KeyboardButton('üó£Ô∏è–í–∏–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å'), KeyboardButton('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—èüìú')],
                                                [KeyboardButton('‚≠êÔ∏è–ó–±–µ—Ä–µ–∂–µ–Ω–µ')]
                                            ]
                                        ))
            else:
                    # –Ø–∫—â–æ –Ω–µ –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó, –∞–∫—Ç–∏–≤—É—î–º–æ –π–æ–≥–æ
                await ConvertToVoiceStep.waiting_for_text.set()
                mainmenu = ReplyKeyboardMarkup(resize_keyboard=True)
                conv1 = KeyboardButton('–¢–µ–∫—Å—Ç ‚û° –≥–æ–ª–æ—Å')
                itemenu = KeyboardButton('üîô–ú–µ–Ω—é')
                mainmenu.row(conv1)
                mainmenu.row(itemenu)
                mainmenu.add()
                await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ –≥–æ–ª–æ—Å", reply_markup=mainmenu)

        #else:
            #await message.answer(
                #"<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b> üëáüèª",
                #parse_mode=types.ParseMode.HTML,
                #reply_markup=showChannels()
            #)

user_saved_voices = {}  # user_id -> list of short_ids
saved_voice_ids = {}  # short_id -> full Telegram file_id
MAX_SAVED_VOICES = 10  # –õ—ñ–º—ñ—Ç –Ω–∞ 10 –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

@dp.message_handler(state=ConvertToVoiceStep.waiting_for_text, content_types=types.ContentTypes.TEXT)
async def convert_to_voice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é
    #subscribed = await check_sub_channels(CHANNELS, user_id)
    #if not subscribed:
        #await message.answer(
            #"<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b> üëáüèª",
            #parse_mode=types.ParseMode.HTML,
            #reply_markup=showChannels()
        #)
        #return  # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó, –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É—é—á–∏ —Ç–µ–∫—Å—Ç

    text = message.text

    # –í–∏—Ö—ñ–¥ —ñ–∑ —Ä–µ–∂–∏–º—É, —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞
    if text in ['üó£Ô∏è–í–∏–±—Ä–∞—Ç–∏ –≥–æ–ª–æ—Å', '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—èüìú', 'üîô–ú–µ–Ω—é', '‚≠êÔ∏è–ó–±–µ—Ä–µ–∂–µ–Ω–µ', '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—èüîä']:
        await state.finish()
        await process_message(message, state)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç"
    processing_message = await message.answer("üõ† –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...")

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ–∫–∞—î–º–æ –≤—ñ–¥ 3 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(random.randint(3, 5))

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç"
    await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)

    # –¢–µ–ø–µ—Ä –≥–µ–Ω–µ—Ä—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    voice = user_voice.get(user_id, 'uk')  # default voice
    language = voice.split("-")[0]
    speech = gTTS(text=text, lang=language, slow=False)
    file_path = f"{uuid.uuid4()}.ogg"
    speech.save(file_path)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª
    with open(file_path, "rb") as audio:
        sent_message = await message.answer_audio(audio, caption="@Voice_text_ua_bot")

    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    os.remove(file_path)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
    if sent_message.audio:
        telegram_file_id = sent_message.audio.file_id
    elif sent_message.voice:
        telegram_file_id = sent_message.voice.file_id
    else:
        return  # –Ø–∫—â–æ –Ω–µ–º–∞—î file_id, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–æ—Ç–∫–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ ID —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ file_id
    short_id = str(uuid.uuid4())[:8]
    saved_voice_ids[short_id] = telegram_file_id

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "‚≠ê –î–æ–¥–∞—Ç–∏ –≤ –∑–±–µ—Ä–µ–∂–µ–Ω–µ"
    save_button = InlineKeyboardMarkup()
    save_button.add(InlineKeyboardButton("‚≠ê –î–æ–¥–∞—Ç–∏ –≤ –∑–±–µ—Ä–µ–∂–µ–Ω–µ", callback_data=f"save_{short_id}"))

    await sent_message.edit_reply_markup(reply_markup=save_button)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await ConvertToVoiceStep.waiting_for_text.set()
    
@dp.callback_query_handler(lambda call: call.data.startswith("save_"), state="*")
async def save_voice(call: types.CallbackQuery):
    user_id = call.from_user.id
    short_id = call.data.split("_")[1]

    file_id = get_voice_file_id(short_id)
    if file_id:
        await call.answer("‚ö†Ô∏è–ì–æ–ª–æ—Å–æ–≤–µ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ!")
        return

    saved_voices = get_saved_voices(user_id)

    if len(saved_voices) >= MAX_SAVED_VOICES:
        await call.answer("‚ö†Ô∏è–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –ª—ñ–º—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö!")
        return

    if short_id in [sv[0] for sv in saved_voices]:
        await call.answer("‚ö†Ô∏è–ì–æ–ª–æ—Å–æ–≤–µ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ!")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
    save_voice_to_db(user_id, short_id, saved_voice_ids[short_id])
    await call.answer("‚ûï–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ‚ûï")

@dp.callback_query_handler(lambda call: call.data.startswith("play_"), state="*")
async def send_saved_voice(call: types.CallbackQuery):
    short_id = call.data.split("_")[1]
    file_id = get_voice_file_id(short_id)

    if not file_id:
        await call.answer("‚ùå–¶–µ –≥–æ–ª–æ—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–µ")
        return

    delete_button = types.InlineKeyboardMarkup()
    delete_button.add(types.InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{short_id}"))

    await call.message.answer_audio(file_id, caption="üéô –í–∞—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", reply_markup=delete_button)

@dp.callback_query_handler(lambda call: call.data.startswith("delete_"), state="*")
async def delete_saved_voice(call: types.CallbackQuery):
    user_id = call.from_user.id
    short_id = call.data.split("_")[1]

    file_id = get_voice_file_id(short_id)

    if file_id:
        delete_voice_from_db(user_id, short_id)
        await call.answer("‚ûñ–£—Å–ø—ñ—à–Ω–æ –≤–∏–ª—É—á–µ–Ω–æ‚ûñ")
        await call.message.delete()
    else:
        await call.answer("‚ùå –¶–µ –≥–æ–ª–æ—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–µ")

user_voice = {}

# –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤
voices = {
    'voice1': ('uk', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶'),
    'voice2': ('pl', 'Polski üáµüá±'),
    'voice3': ('it', 'Italiano üáÆüáπ'),
    'voice4': ('fr', 'Fran√ßais üá´üá∑'),
    'voice5': ('en', 'English üá∫üá≤'),
    'voice6': ('es', 'Espa√±ol üá™üá∏'),
    'voice7': ('de', 'Deutsch üá©üá™'),
    'voice8': ('pt', 'Portugu√™s üáµüáπ'),
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
def get_first_page_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data='voice1'),
        InlineKeyboardButton("Polski üáµüá±", callback_data='voice2'),
        InlineKeyboardButton("Italiano üáÆüáπ", callback_data='voice3'),
        InlineKeyboardButton("Fran√ßais üá´üá∑", callback_data='voice4')
    )
    markup.row(
        InlineKeyboardButton("‚¨Ö", callback_data='none'),
        InlineKeyboardButton("1/2", callback_data='none'),
        InlineKeyboardButton("‚û°", callback_data='x2')
    )
    return markup
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
def get_second_page_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("English üá∫üá≤", callback_data='voice5'),
        InlineKeyboardButton("Espa√±ol üá™üá∏", callback_data='voice6'),
        InlineKeyboardButton("Deutsch üá©üá™", callback_data='voice7'),
        InlineKeyboardButton("Portugu√™s üáµüáπ", callback_data='voice8')
    )
    markup.row(
        InlineKeyboardButton("‚¨Ö", callback_data='x1'),
        InlineKeyboardButton("2/2", callback_data='none'),
        InlineKeyboardButton("‚û°", callback_data='none')
    )
    return markup

@dp.callback_query_handler(lambda call: call.data.startswith('voice') or call.data in ['x1', 'x2'], state="*")
async def callback_handler(call: types.CallbackQuery):
    try:
        user_id = call.from_user.id
        current_lang_code = user_voice.get(user_id, 'uk')  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä

        # –Ø–∫—â–æ –≤–∏–±—Ä–∞–ª–∏ –≥–æ–ª–æ—Å ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ —Ç–æ–π —Å–∞–º–∏–π –≥–æ–ª–æ—Å
        if call.data.startswith('voice'):
            new_lang_code = voices[call.data][0]  # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–¥ –º–æ–≤–∏
            if new_lang_code == current_lang_code:  # –Ø–∫—â–æ –º–æ–≤–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è
                await call.answer(f"‚ùó–í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ {voices[call.data][1]}")
            else:
                user_voice[user_id] = new_lang_code

            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            markup = get_first_page_keyboard() if call.data in ['voice1', 'voice2', 'voice3', 'voice4'] else get_second_page_keyboard()
            await call.message.edit_text(
                f"üì¢ –û–±–∏—Ä–∞–π—Ç–µ <b>–º–æ–≤—É</b> —Ç–∞ <b>–≥–æ–ª–æ—Å</b> –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!\n<b>üîπ–ê–∫—Ç–∏–≤–Ω–∞ –º–æ–≤–∞:</b> {voices[call.data][1]}\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç ‚öôÔ∏è",
                parse_mode=types.ParseMode.HTML,
                reply_markup=markup
            )
            return

        # –Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏, –æ—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = next((name for code, name in voices.values() if code == current_lang_code), "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        markup = get_second_page_keyboard() if call.data == 'x2' else get_first_page_keyboard()

        # –û–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, –±–µ–∑ –∑–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É
        await call.message.edit_reply_markup(reply_markup=markup)

    except Exception as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è
        pass

@dp.message_handler()
async def register_user(message: types.Message):
    add_user(message.from_user.id, message.from_user.first_name)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
